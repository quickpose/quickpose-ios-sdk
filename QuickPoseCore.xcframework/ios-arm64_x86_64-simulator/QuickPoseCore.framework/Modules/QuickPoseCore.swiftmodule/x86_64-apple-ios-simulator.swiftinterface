// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name QuickPoseCore
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import AVKit
import CoreGraphics
import CoreML
import CoreMedia
import Foundation
import Swift
import UIKit
import VideoToolbox
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class QuickPoseThresholdCounter {
  @frozen public enum CountState {
    case poseEntered(_: Swift.Int)
    case poseComplete(_: Swift.Int)
    public var count: Swift.Int {
      get
    }
    public var isEntered: Swift.Bool {
      get
    }
  }
  final public let enterThreshold: Swift.Double
  final public let exitThreshold: Swift.Double
  public var state: QuickPoseCore.QuickPoseThresholdCounter.CountState
  public init(enterThreshold: Swift.Double = 0.6, exitThreshold: Swift.Double = 0.3)
  public func count(_ value: Swift.Double, onChange: ((QuickPoseCore.QuickPoseThresholdCounter.CountState) -> ())? = nil) -> QuickPoseCore.QuickPoseThresholdCounter.CountState
  public func reset()
  @objc deinit
}
public class QuickPosePostProcessor {
  public struct Request {
    public let input: Foundation.URL
    public let output: Foundation.URL
    public let outputType: AVFoundation.AVFileType
    public let darkenOutput: CoreFoundation.CGFloat
    public let startTime: CoreMedia.CMTime
    public let endTime: CoreMedia.CMTime?
    public init(input: Foundation.URL, output: Foundation.URL, outputType: AVFoundation.AVFileType, darkenOutput: CoreFoundation.CGFloat = 0.1, startTime: CoreMedia.CMTime = CMTimeMakeWithSeconds(0, preferredTimescale:1000), endTime: CoreMedia.CMTime? = nil)
    public init(bundleFilename: Swift.String, output: Foundation.URL, outputType: AVFoundation.AVFileType, darkenOutput: CoreFoundation.CGFloat = 0.1, startTime: CoreMedia.CMTime = CMTimeMakeWithSeconds(0, preferredTimescale:1000), endTime: CoreMedia.CMTime? = nil)
  }
  public init(sdkKey: Swift.String)
  public func update(features: [QuickPoseCore.QuickPose.Feature], modelConfig: QuickPoseCore.QuickPose.ModelConfig? = nil)
  public func process(features: [QuickPoseCore.QuickPose.Feature], modelConfig: QuickPoseCore.QuickPose.ModelConfig = QuickPose.ModelConfig(), isFrontCamera: Swift.Bool, request: QuickPoseCore.QuickPosePostProcessor.Request, onFrame: @escaping ((Swift.Double, Swift.Double, QuickPoseCore.QuickPose.Status, UIKit.UIImage?, [QuickPoseCore.QuickPose.Feature : QuickPoseCore.QuickPose.FeatureResult], [QuickPoseCore.QuickPose.Feature : QuickPoseCore.QuickPose.PoseFeedback], QuickPoseCore.QuickPose.Landmarks?) -> ())) throws
  @objc deinit
}
public class QuickPoseClassifierSmoother {
  public init(alpha: Swift.Double = 0.9, windowSize: Swift.Int = 10)
  public func smooth(probs: [Swift.Double]) -> [Swift.Double]
  @objc deinit
}
public class QuickPoseDoubleAndStateUnchangedDetector {
  public var state: (resultValue: (value: Swift.Double, state: Swift.String), timestamp: Foundation.Date)?
  public var similarDuration: Foundation.TimeInterval
  public var leniency: Swift.Double
  public init(similarDuration: Foundation.TimeInterval, leniency: Swift.Double = 0.05)
  public func count(result: (value: Swift.Double, state: Swift.String), timestamp: Foundation.Date = Date(), minValue: Swift.Double? = nil, maxValue: Swift.Double? = nil, onChange: (() -> ()))
  public func reset()
  @objc deinit
}
public class QuickPoseDoubleUnchangedDetector {
  public var state: (resultValue: Swift.Double, timestamp: Foundation.Date)?
  public var similarDuration: Foundation.TimeInterval
  public var leniency: Swift.Double
  public init(similarDuration: Foundation.TimeInterval, leniency: Swift.Double = 0.05)
  public func count(result: Swift.Double, timestamp: Foundation.Date = Date(), minValue: Swift.Double? = nil, maxValue: Swift.Double? = nil, onChange: (() -> ()))
  public func reset()
  @objc deinit
}
extension CoreFoundation.CGPoint : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol QuickPoseCaptureAVAssetOutputSampleBufferDelegate : ObjectiveC.NSObjectProtocol {
  func captureAVOutput(didOutput sampleBuffer: CoreVideo.CVBuffer, timestamp: CoreMedia.CMTime, isFrontCamera: Swift.Bool)
}
extension QuickPoseCore.QuickPose {
  public struct Style : Swift.Hashable {
    public struct ConditionalColor : Swift.Hashable {
      public init(min: Swift.Double?, max: Swift.Double?, color: UIKit.UIColor)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: QuickPoseCore.QuickPose.Style.ConditionalColor, b: QuickPoseCore.QuickPose.Style.ConditionalColor) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public init(hidden: Swift.Bool = false, relativeFontSize: Swift.Double = 1, relativeArcSize: Swift.Double = 1, relativeLineWidth: Swift.Double = 1, cornerRadius: Swift.Double = 0, color: UIKit.UIColor = UIColor.white, conditionalColors: [QuickPoseCore.QuickPose.Style.ConditionalColor]? = nil)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: QuickPoseCore.QuickPose.Style, b: QuickPoseCore.QuickPose.Style) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct RelativeCameraEdgeInsets {
    public let top: CoreFoundation.CGFloat
    public let left: CoreFoundation.CGFloat
    public let bottom: CoreFoundation.CGFloat
    public let right: CoreFoundation.CGFloat
    public init(top: CoreFoundation.CGFloat, left: CoreFoundation.CGFloat, bottom: CoreFoundation.CGFloat, right: CoreFoundation.CGFloat)
  }
  @frozen public enum Feature : Swift.Hashable {
    case showPoints(style: QuickPoseCore.QuickPose.Style = Style())
    case inside(_: QuickPoseCore.QuickPose.RelativeCameraEdgeInsets, limb: QuickPoseCore.QuickPose.Landmarks.Group = .wholeBodyAndHead, style: QuickPoseCore.QuickPose.Style = QuickPose.Style(cornerRadius: 12, color: UIColor.red, conditionalColors: [QuickPose.Style.ConditionalColor(min: 1, max: nil, color: UIColor.green)]))
    case overlay(_: QuickPoseCore.QuickPose.Landmarks.Group, style: QuickPoseCore.QuickPose.Style = Style())
    case measureLineBody(p1: QuickPoseCore.QuickPose.Landmarks.Body, p2: QuickPoseCore.QuickPose.Landmarks.Body, userHeight: Swift.Double?, format: Swift.String?, style: QuickPoseCore.QuickPose.Style = Style())
    case measureAngleBody(origin: QuickPoseCore.QuickPose.Landmarks.Body, p1: QuickPoseCore.QuickPose.Landmarks.Body, p2: QuickPoseCore.QuickPose.Landmarks.Body?, clockwiseDirection: Swift.Bool, style: QuickPoseCore.QuickPose.Style = Style())
    case measureAngleFace(origin: QuickPoseCore.QuickPose.Landmarks.Face, p1: QuickPoseCore.QuickPose.Landmarks.Face, clockwiseDirection: Swift.Bool, style: QuickPoseCore.QuickPose.Style = Style())
    case raisedFingers(side: QuickPoseCore.QuickPose.Side? = nil, style: QuickPoseCore.QuickPose.Style = Style(relativeLineWidth: 0.5))
    case thumbsUp(side: QuickPoseCore.QuickPose.Side? = nil, style: QuickPoseCore.QuickPose.Style = Style(relativeLineWidth: 0.5))
    case thumbsUpOrDown(side: QuickPoseCore.QuickPose.Side? = nil, style: QuickPoseCore.QuickPose.Style = Style(relativeLineWidth: 0.5))
    case rangeOfMotion(_: QuickPoseCore.QuickPose.RangeOfMotion, style: QuickPoseCore.QuickPose.Style = Style())
    case fitness(_: QuickPoseCore.QuickPose.FitnessFeature, style: QuickPoseCore.QuickPose.Style = Style())
    case overlayHasCameraAsBackground(darkenCamera: Swift.Float)
    public var displayString: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (lhs: QuickPoseCore.QuickPose.Feature, rhs: QuickPoseCore.QuickPose.Feature) -> Swift.Bool
    public func restyled(_ newStyle: QuickPoseCore.QuickPose.Style) -> QuickPoseCore.QuickPose.Feature
    public var hashValue: Swift.Int {
      get
    }
  }
  @frozen public enum Side : Swift.Hashable {
    case left
    case right
    public var displayTitle: Swift.String {
      get
    }
    public var flip: QuickPoseCore.QuickPose.Side {
      get
    }
    public var directionChange: QuickPoseCore.QuickPose.PoseFeedback.DirectionChange {
      get
    }
    public static func == (a: QuickPoseCore.QuickPose.Side, b: QuickPoseCore.QuickPose.Side) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @frozen public enum RangeOfMotion : Swift.Hashable {
    case neck(clockwiseDirection: Swift.Bool)
    case shoulder(side: QuickPoseCore.QuickPose.Side, clockwiseDirection: Swift.Bool)
    case elbow(side: QuickPoseCore.QuickPose.Side, clockwiseDirection: Swift.Bool)
    case hip(side: QuickPoseCore.QuickPose.Side, clockwiseDirection: Swift.Bool)
    case back(clockwiseDirection: Swift.Bool)
    case knee(side: QuickPoseCore.QuickPose.Side, clockwiseDirection: Swift.Bool)
    case ankle(side: QuickPoseCore.QuickPose.Side, clockwiseDirection: Swift.Bool)
    public var shortDisplayTitle: Swift.String {
      get
    }
    public var longDisplayTitle: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: QuickPoseCore.QuickPose.RangeOfMotion, b: QuickPoseCore.QuickPose.RangeOfMotion) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  @frozen public enum FitnessFeature : Swift.Hashable {
    case squats
    case pushUps
    case jumpingJacks
    case sumoSquats
    case lunges(side: QuickPoseCore.QuickPose.Side)
    case sitUps
    case cobraWings
    case plank
    case plankStraightArm
    case legRaises
    case gluteBridge
    case overheadDumbbellPress
    case vUps
    case lateralRaises
    case frontRaises
    case hipAbductionStanding(side: QuickPoseCore.QuickPose.Side)
    case sideLunges(side: QuickPoseCore.QuickPose.Side)
    case bicepCurls
    case bicepCurlsSingleArm(side: QuickPoseCore.QuickPose.Side)
    public var id: Swift.String {
      get
    }
    public var displayTitle: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: QuickPoseCore.QuickPose.FitnessFeature, b: QuickPoseCore.QuickPose.FitnessFeature) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  @frozen public enum BodyPose {
    case standFacing
    case sitFacing
    case sitFacingCrossLegged
    case standSideOn
    case floorFacing
    case floorSideOnWithBackOffTheGround
    case floorSideOnWithBackOnTheGround
    public static func == (a: QuickPoseCore.QuickPose.BodyPose, b: QuickPoseCore.QuickPose.BodyPose) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @frozen public enum BodyFeedback : Swift.String {
    case standFacing
    case sitFacing
    case sitFacingCrossLegged
    case standSideOn
    case standFacingOrSide
    case floorFacing
    case floorSideOnWithBackOffTheGround
    case floorWithBackOffTheGround
    case floorSideOnWithBackOnTheGround
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @frozen public enum PoseFeedback {
    @frozen public enum ActionChange : Swift.String {
      case move
      case lean
      case straighten
      case raise
      case lower
      case place
      case bend
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @frozen public enum DirectionChange : Swift.String {
      case up
      case down
      case left
      case right
      case forward
      case back
      case apart
      case intoView
      case intoBox
      case onFloor
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    case body(feedback: QuickPoseCore.QuickPose.BodyFeedback, isRequired: Swift.Bool)
    case group(action: QuickPoseCore.QuickPose.PoseFeedback.ActionChange, group: QuickPoseCore.QuickPose.Landmarks.Group, direction: QuickPoseCore.QuickPose.PoseFeedback.DirectionChange?, isRequired: Swift.Bool)
    case joint(action: QuickPoseCore.QuickPose.PoseFeedback.ActionChange, joint: QuickPoseCore.QuickPose.Landmarks.Body, direction: QuickPoseCore.QuickPose.PoseFeedback.DirectionChange?, isRequired: Swift.Bool)
    public var displayString: Swift.String {
      get
    }
    public var isRequired: Swift.Bool {
      get
    }
  }
}
extension QuickPoseCore.QuickPose {
  public struct FeatureResult : Swift.Equatable {
    public let value: Swift.Double
    public let stringValue: Swift.String
    public static func == (a: QuickPoseCore.QuickPose.FeatureResult, b: QuickPoseCore.QuickPose.FeatureResult) -> Swift.Bool
  }
  @frozen public enum Status {
    case success(info: (fps: Swift.Int, latency: Swift.Double, size: CoreFoundation.CGSize, timestamp: CoreMedia.CMTime))
    case noPersonFound(info: (fps: Swift.Int, latency: Swift.Double, size: CoreFoundation.CGSize, timestamp: CoreMedia.CMTime))
    case sdkValidationError
  }
}
@objc public class QuickPose : ObjectiveC.NSObject, AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate, QuickPoseCore.QuickPoseCaptureAVAssetOutputSampleBufferDelegate {
  public init(sdkKey: Swift.String)
  public struct ModelConfig {
    @frozen public enum ModelComplexity {
      case light
      case good
      case heavy
      public static func == (a: QuickPoseCore.QuickPose.ModelConfig.ModelComplexity, b: QuickPoseCore.QuickPose.ModelConfig.ModelComplexity) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public init(detailedFaceTracking: Swift.Bool = true, detailedHandTracking: Swift.Bool = true, modelComplexity: QuickPoseCore.QuickPose.ModelConfig.ModelComplexity? = nil, rotationDegrees: Swift.Int? = nil)
  }
  public func start(features: [QuickPoseCore.QuickPose.Feature], modelConfig: QuickPoseCore.QuickPose.ModelConfig = ModelConfig(), onStart: (() -> ())? = nil, onFrame: @escaping ((QuickPoseCore.QuickPose.Status, UIKit.UIImage?, [QuickPoseCore.QuickPose.Feature : QuickPoseCore.QuickPose.FeatureResult], [QuickPoseCore.QuickPose.Feature : QuickPoseCore.QuickPose.PoseFeedback], QuickPoseCore.QuickPose.Landmarks?) -> ()))
  public func disableLogging()
  public func enableLogging()
  public func update(features: [QuickPoseCore.QuickPose.Feature], modelConfig: QuickPoseCore.QuickPose.ModelConfig? = nil)
  public func stop()
  public func libVersion() -> Swift.String
  public func modelWeight() -> Swift.String
  public func quickPoseVersion() -> Swift.String
  public func captureAVOutput(didOutput sampleBuffer: CoreVideo.CVBuffer, timestamp: CoreMedia.CMTime, isFrontCamera: Swift.Bool)
  @objc public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
  @objc deinit
}
extension QuickPoseCore.QuickPose {
  public struct Point3d {
    public let x: Swift.Double
    public let y: Swift.Double
    public let cameraAspectY: Swift.Double
    public let z: Swift.Double
    public let visibility: Swift.Double
    public let presence: Swift.Double
    public func cgPoint(scaledTo shape: CoreFoundation.CGSize, flippedHorizontally: Swift.Bool = false) -> CoreFoundation.CGPoint
    public func xyDistance(to p2: QuickPoseCore.QuickPose.Point3d) -> Swift.Double
    public func yDistance(to p2: QuickPoseCore.QuickPose.Point3d) -> Swift.Double
    public func xyDistanceWorld(to p2: QuickPoseCore.QuickPose.Point3d) -> Swift.Double
    public func midPoint(to p2: QuickPoseCore.QuickPose.Point3d) -> QuickPoseCore.QuickPose.Point3d
    public static func + (lhs: QuickPoseCore.QuickPose.Point3d, rhs: QuickPoseCore.QuickPose.Point3d) -> QuickPoseCore.QuickPose.Point3d
    public static func - (lhs: QuickPoseCore.QuickPose.Point3d, rhs: QuickPoseCore.QuickPose.Point3d) -> QuickPoseCore.QuickPose.Point3d
  }
  public struct Landmarks {
    public func landmark(forBody joint: QuickPoseCore.QuickPose.Landmarks.Body) -> QuickPoseCore.QuickPose.Point3d
    public func worldLandmark(forBody joint: QuickPoseCore.QuickPose.Landmarks.Body) -> QuickPoseCore.QuickPose.Point3d
    public func landmark(forFace joint: QuickPoseCore.QuickPose.Landmarks.Face) -> QuickPoseCore.QuickPose.Point3d?
    public func allLandmarksForFace() -> [QuickPoseCore.QuickPose.Point3d]
    public func allWorldLandmarksForBody() -> [QuickPoseCore.QuickPose.Point3d]
    public func allLandmarksForBody() -> [QuickPoseCore.QuickPose.Point3d]
    public func allLandmarksForHand(side: QuickPoseCore.QuickPose.Side) -> [QuickPoseCore.QuickPose.Point3d]
    public func landmark(forLeftHand joint: QuickPoseCore.QuickPose.Landmarks.Hand) -> QuickPoseCore.QuickPose.Point3d?
    public func landmark(forRightHand joint: QuickPoseCore.QuickPose.Landmarks.Hand) -> QuickPoseCore.QuickPose.Point3d?
    public var closestSide: QuickPoseCore.QuickPose.Side {
      get
    }
    @frozen public enum Group : Swift.Equatable {
      case none
      case wholeBody
      case wholeBodyAndHead
      case upperBody
      case straightArmsUpperBody
      case toWristsUpperBody
      case shoulders
      case arm(side: QuickPoseCore.QuickPose.Side)
      case armToWrist(side: QuickPoseCore.QuickPose.Side)
      case armNoElbow(side: QuickPoseCore.QuickPose.Side)
      case straightArm(side: QuickPoseCore.QuickPose.Side)
      case hand(side: QuickPoseCore.QuickPose.Side)
      case leg(side: QuickPoseCore.QuickPose.Side)
      case lowerBody
      case hips
      case elbows
      case knees
      case legs
      case arms
      case head
      public func toString() -> Swift.String
      public static func commonLimbs() -> [QuickPoseCore.QuickPose.Landmarks.Group]
      public static func allLimbs() -> [QuickPoseCore.QuickPose.Landmarks.Group]
      public func toJoints() -> [[QuickPoseCore.QuickPose.Landmarks.Body]]
      public static func == (a: QuickPoseCore.QuickPose.Landmarks.Group, b: QuickPoseCore.QuickPose.Landmarks.Group) -> Swift.Bool
    }
    @frozen public enum Face : Swift.Int {
      case faceForehead
      case faceChin
      case faceLeftEar
      case faceRightEar
      case faceNose
      public static func parse(rawValue: Swift.String) -> QuickPoseCore.QuickPose.Landmarks.Face?
      public init?(rawValue: Swift.Int)
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
    @frozen public enum Body : Swift.Hashable {
      case nose
      case eyeInner(side: QuickPoseCore.QuickPose.Side)
      case eyeOuter(side: QuickPoseCore.QuickPose.Side)
      case eye(side: QuickPoseCore.QuickPose.Side)
      case ear(side: QuickPoseCore.QuickPose.Side)
      case mouth(side: QuickPoseCore.QuickPose.Side)
      case shoulder(side: QuickPoseCore.QuickPose.Side)
      case shoulderMid
      case elbow(side: QuickPoseCore.QuickPose.Side)
      case wrist(side: QuickPoseCore.QuickPose.Side)
      case pinky(side: QuickPoseCore.QuickPose.Side)
      case index(side: QuickPoseCore.QuickPose.Side)
      case thumb(side: QuickPoseCore.QuickPose.Side)
      case hip(side: QuickPoseCore.QuickPose.Side)
      case hipMid
      case knee(side: QuickPoseCore.QuickPose.Side)
      case ankle(side: QuickPoseCore.QuickPose.Side)
      case heel(side: QuickPoseCore.QuickPose.Side)
      case footIndex(side: QuickPoseCore.QuickPose.Side)
      public static func toHumanReadableString(_ body: QuickPoseCore.QuickPose.Landmarks.Body) -> Swift.String?
      public static func toString(_ body: QuickPoseCore.QuickPose.Landmarks.Body) -> Swift.String?
      public static func parse(rawValue: Swift.String) -> QuickPoseCore.QuickPose.Landmarks.Body?
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: QuickPoseCore.QuickPose.Landmarks.Body, b: QuickPoseCore.QuickPose.Landmarks.Body) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum HandGroup : Swift.Int {
      case none
      case hand
      case fingers
      public static func parse(_ rawValue: Swift.String?) -> QuickPoseCore.QuickPose.Landmarks.HandGroup
      public func toJoints() -> [[QuickPoseCore.QuickPose.Landmarks.Hand]]
      public init?(rawValue: Swift.Int)
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
    @frozen public enum Hand : Swift.Int {
      case WRIST
      case THUMB_CMC
      case THUMB_MCP
      case THUMB_IP
      case THUMB_TIP
      case INDEX_FINGER_MCP
      case INDEX_FINGER_PIP
      case INDEX_FINGER_DIP
      case INDEX_FINGER_TIP
      case MIDDLE_FINGER_MCP
      case MIDDLE_FINGER_PIP
      case MIDDLE_FINGER_DIP
      case MIDDLE_FINGER_TIP
      case RING_FINGER_MCP
      case RING_FINGER_PIP
      case RING_FINGER_DIP
      case RING_FINGER_TIP
      case PINKY_FINGER_MCP
      case PINKY_FINGER_PIP
      case PINKY_FINGER_DIP
      case PINKY_FINGER_TIP
      public static func parse(rawValue: Swift.String) -> QuickPoseCore.QuickPose.Landmarks.Hand?
      public init?(rawValue: Swift.Int)
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
  }
}
public class QuickPoseThresholdTimer {
  @frozen public enum TimerState {
    public struct Stats : Swift.CustomStringConvertible {
      public let minValue: Swift.Double?
      public var averageValue: Swift.Double? {
        get
      }
      public let maxValue: Swift.Double?
      public var description: Swift.String {
        get
      }
    }
    case poseEntered(_: Swift.Double, stats: QuickPoseCore.QuickPoseThresholdTimer.TimerState.Stats)
    case poseComplete(_: Swift.Double, stats: QuickPoseCore.QuickPoseThresholdTimer.TimerState.Stats)
    public var time: Swift.Double {
      get
    }
    public var isEntered: Swift.Bool {
      get
    }
    public var stats: QuickPoseCore.QuickPoseThresholdTimer.TimerState.Stats {
      get
    }
  }
  final public let threshold: Swift.Double
  public var state: QuickPoseCore.QuickPoseThresholdTimer.TimerState
  public init(threshold: Swift.Double = 0.6, windowSize: Swift.Int = 10)
  public func time(_ value: Swift.Double, onChange: ((QuickPoseCore.QuickPoseThresholdTimer.TimerState) -> ())? = nil) -> QuickPoseCore.QuickPoseThresholdTimer.TimerState
  public func stop()
  @objc deinit
}
extension QuickPoseCore.QuickPoseThresholdCounter.CountState : Swift.Sendable {}
extension QuickPoseCore.QuickPoseThresholdCounter.CountState : Swift.BitwiseCopyable {}
extension QuickPoseCore.QuickPose.Side : Swift.Sendable {}
extension QuickPoseCore.QuickPose.Side : Swift.BitwiseCopyable {}
extension QuickPoseCore.QuickPose.RangeOfMotion : Swift.Sendable {}
extension QuickPoseCore.QuickPose.RangeOfMotion : Swift.BitwiseCopyable {}
extension QuickPoseCore.QuickPose.FitnessFeature : Swift.Sendable {}
extension QuickPoseCore.QuickPose.FitnessFeature : Swift.BitwiseCopyable {}
extension QuickPoseCore.QuickPose.BodyPose : Swift.Equatable {}
extension QuickPoseCore.QuickPose.BodyPose : Swift.Hashable {}
extension QuickPoseCore.QuickPose.BodyPose : Swift.Sendable {}
extension QuickPoseCore.QuickPose.BodyPose : Swift.BitwiseCopyable {}
extension QuickPoseCore.QuickPose.BodyFeedback : Swift.Equatable {}
extension QuickPoseCore.QuickPose.BodyFeedback : Swift.Hashable {}
extension QuickPoseCore.QuickPose.BodyFeedback : Swift.RawRepresentable {}
extension QuickPoseCore.QuickPose.BodyFeedback : Swift.Sendable {}
extension QuickPoseCore.QuickPose.BodyFeedback : Swift.BitwiseCopyable {}
extension QuickPoseCore.QuickPose.PoseFeedback : Swift.Sendable {}
extension QuickPoseCore.QuickPose.PoseFeedback : Swift.BitwiseCopyable {}
extension QuickPoseCore.QuickPose.PoseFeedback.ActionChange : Swift.Equatable {}
extension QuickPoseCore.QuickPose.PoseFeedback.ActionChange : Swift.Hashable {}
extension QuickPoseCore.QuickPose.PoseFeedback.ActionChange : Swift.RawRepresentable {}
extension QuickPoseCore.QuickPose.PoseFeedback.ActionChange : Swift.Sendable {}
extension QuickPoseCore.QuickPose.PoseFeedback.ActionChange : Swift.BitwiseCopyable {}
extension QuickPoseCore.QuickPose.PoseFeedback.DirectionChange : Swift.Equatable {}
extension QuickPoseCore.QuickPose.PoseFeedback.DirectionChange : Swift.Hashable {}
extension QuickPoseCore.QuickPose.PoseFeedback.DirectionChange : Swift.RawRepresentable {}
extension QuickPoseCore.QuickPose.PoseFeedback.DirectionChange : Swift.Sendable {}
extension QuickPoseCore.QuickPose.PoseFeedback.DirectionChange : Swift.BitwiseCopyable {}
extension QuickPoseCore.QuickPose.Status : Swift.Sendable {}
extension QuickPoseCore.QuickPose.Status : Swift.BitwiseCopyable {}
extension QuickPoseCore.QuickPose.ModelConfig.ModelComplexity : Swift.Equatable {}
extension QuickPoseCore.QuickPose.ModelConfig.ModelComplexity : Swift.Hashable {}
extension QuickPoseCore.QuickPose.ModelConfig.ModelComplexity : Swift.Sendable {}
extension QuickPoseCore.QuickPose.ModelConfig.ModelComplexity : Swift.BitwiseCopyable {}
extension QuickPoseCore.QuickPose.Landmarks.Group : Swift.Sendable {}
extension QuickPoseCore.QuickPose.Landmarks.Group : Swift.BitwiseCopyable {}
extension QuickPoseCore.QuickPose.Landmarks.Face : Swift.Equatable {}
extension QuickPoseCore.QuickPose.Landmarks.Face : Swift.Hashable {}
extension QuickPoseCore.QuickPose.Landmarks.Face : Swift.RawRepresentable {}
extension QuickPoseCore.QuickPose.Landmarks.Face : Swift.Sendable {}
extension QuickPoseCore.QuickPose.Landmarks.Face : Swift.BitwiseCopyable {}
extension QuickPoseCore.QuickPose.Landmarks.Body : Swift.Sendable {}
extension QuickPoseCore.QuickPose.Landmarks.Body : Swift.BitwiseCopyable {}
extension QuickPoseCore.QuickPose.Landmarks.HandGroup : Swift.Equatable {}
extension QuickPoseCore.QuickPose.Landmarks.HandGroup : Swift.Hashable {}
extension QuickPoseCore.QuickPose.Landmarks.HandGroup : Swift.RawRepresentable {}
extension QuickPoseCore.QuickPose.Landmarks.HandGroup : Swift.Sendable {}
extension QuickPoseCore.QuickPose.Landmarks.HandGroup : Swift.BitwiseCopyable {}
extension QuickPoseCore.QuickPose.Landmarks.Hand : Swift.Equatable {}
extension QuickPoseCore.QuickPose.Landmarks.Hand : Swift.Hashable {}
extension QuickPoseCore.QuickPose.Landmarks.Hand : Swift.RawRepresentable {}
extension QuickPoseCore.QuickPose.Landmarks.Hand : Swift.Sendable {}
extension QuickPoseCore.QuickPose.Landmarks.Hand : Swift.BitwiseCopyable {}
